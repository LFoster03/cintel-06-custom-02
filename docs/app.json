[{"name": "app.py", "content": "# ================================================================\n# Diamonds Exploration (Plotly Version with Sparkline)\n# ================================================================\nfrom shiny.express import ui, input, render\nfrom shiny import reactive\nfrom shinywidgets import render_plotly\nimport seaborn as sns\nimport pandas as pd\nimport random\nimport plotly.express as px\n\n# Load diamonds dataset\ndiamonds = sns.load_dataset(\"diamonds\")\n\n# ------------------------------------------------\n# Reactive Calculations\n# ------------------------------------------------\n\n@reactive.calc\ndef filtered_data():\n    \"\"\"Filter diamonds based on user inputs.\"\"\"\n    df = diamonds.copy()\n\n    # Filter by cut\n    df = df[df[\"cut\"] == input.cut()]\n\n    # Filter by color\n    df = df[df[\"color\"].isin(input.color())]\n\n    # Filter by price range\n    min_price, max_price = input.price_range()\n    df = df[(df[\"price\"] >= min_price) & (df[\"price\"] <= max_price)]\n\n    return df\n\n@reactive.calc\ndef fake_metric():\n    \"\"\"Simulate metric (updates every 5 seconds).\"\"\"\n    reactive.invalidate_later(5)\n    return round(random.uniform(3000, 5000), 2)\n\n# Track metric history\nprice_history = reactive.value([])\n\n@reactive.effect\n@reactive.event(fake_metric)\ndef _update_price_history():\n    history = price_history.get() + [fake_metric()]\n    price_history.set(history[-50:])  # keep last 50 values\n\n# ------------------------------------------------\n# UI\n# ------------------------------------------------\n\nui.page_opts(title=\"Foster Diamonds Inspection \ud83d\udc8e\", fillable=True)\n\nwith ui.sidebar():\n    ui.h3(\"Filters\")\n\n    ui.input_select(\n        \"cut\",\n        \"Select cut:\",\n        choices=diamonds[\"cut\"].unique().tolist(),\n        selected=\"Ideal\"\n    )\n\n    ui.input_checkbox_group(\n        \"color\",\n        \"Select colors:\",\n        choices=diamonds[\"color\"].unique().tolist(),\n        selected=[\"D\", \"E\", \"F\"]\n    )\n\n    ui.input_slider(\n        \"price_range\",\n        \"Price range (USD):\",\n        min=int(diamonds[\"price\"].min()),\n        max=int(diamonds[\"price\"].max()),\n        value=(500, 5000),\n        step=100\n    )\n\n# Value Box\n@render.ui\ndef avg_price_box():\n    return ui.value_box(\n        value=f\"${fake_metric()}\",\n        title=\"Avg Price (Simulated)\",\n        showcase=\"\ud83d\udcb0\"\n    )\n\n# Summary card\nwith ui.card():\n    ui.card_header(\"Summary \ud83d\udc8e\")\n\n    @render.text\n    def summary_text():\n        count = len(filtered_data())\n        return f\"{count} diamonds match your filters.\"\n\n# Table\n@render.ui\ndef summary_table():\n    df = filtered_data()\n    if df.empty:\n        return ui.HTML(\"<p style='color:red;'>No diamonds match your filters.</p>\")\n\n    html_table = df.head(10).to_html(classes=\"table table-striped\", index=False, border=0)\n    return ui.HTML(html_table)\n\n# Plotly Histogram (Filtered Diamonds)\n@render_plotly\ndef price_histogram():\n    df = filtered_data()\n    if df.empty:\n        return px.histogram(pd.DataFrame({\"price\": []}))  # empty plot\n\n    fig = px.histogram(df, x=\"price\", nbins=30, title=\"Price Distribution (Filtered Diamonds)\")\n    fig.update_layout(xaxis_title=\"Price (USD)\", yaxis_title=\"Count\")\n    return fig\n\n# Plotly Scatterplot (Carat vs Price)\n@render_plotly\ndef carat_vs_price():\n    df = filtered_data()\n    if df.empty:\n        return px.scatter(pd.DataFrame({\"carat\": [], \"price\": []}))\n\n    fig = px.scatter(\n        df,\n        x=\"carat\",\n        y=\"price\",\n        color=\"clarity\",\n        title=\"Carat vs Price by Clarity\",\n        opacity=0.7\n    )\n    return fig\n\n# Plotly Histogram (Simulated Prices)\n@render_plotly\ndef simulated_price_histogram():\n    data = price_history.get()\n\n    if len(data) == 0:\n        return px.histogram(pd.DataFrame({\"price\": []}))\n\n    fig = px.histogram(\n        pd.DataFrame({\"Simulated Price\": data}),\n        x=\"Simulated Price\",\n        nbins=10,\n        title=\"Live Histogram of Simulated Avg Prices\",\n        color_discrete_sequence=[\"orange\"]\n    )\n    return fig\n\n# Plotly Line Chart (Sparkline for Simulated Price Trend)\n@render_plotly\ndef simulated_price_sparkline():\n    data = price_history.get()\n\n    # Handle case where no data yet\n    if len(data) == 0:\n        return px.line(pd.DataFrame({\"Price\": []}))\n\n    # Create line chart (sparkline style: minimal axes)\n    df = pd.DataFrame({\"Index\": range(len(data)), \"Price\": data})\n    fig = px.line(df, x=\"Index\", y=\"Price\", title=\"Live Simulated Price Trend\")\n\n    fig.update_layout(\n        xaxis=dict(showgrid=False, showticklabels=False),\n        yaxis=dict(showgrid=False),\n        margin=dict(l=20, r=20, t=40, b=20),\n        height=200\n    )\n\n    return fig\n", "type": "text"}]